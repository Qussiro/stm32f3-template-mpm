
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000028 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 ccsHZPYc.o
08000ea8 l       .text	00000000 LoopCopyDataInit
08000ea0 l       .text	00000000 CopyDataInit
08000ebc l       .text	00000000 LoopFillZerobss
08000eb6 l       .text	00000000 FillZerobss
08000ee0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
00000000 l    df *ABS*	00000000 stm32f30x_exti.c
00000000 l    df *ABS*	00000000 stm32f30x_gpio.c
00000000 l    df *ABS*	00000000 stm32f30x_misc.c
00000000 l    df *ABS*	00000000 stm32f30x_rcc.c
08001118 l     O .text	00000010 APBAHBPrescTable
08001128 l     O .text	0000001a ADCPrescTable
00000000 l    df *ABS*	00000000 stm32f30x_syscfg.c
00000000 l    df *ABS*	00000000 system_stm32f30x.c
00000000 l    df *ABS*	00000000 stm32f30x_it.c
00000000 l    df *ABS*	00000000 main.c
20000028 l     O .bss	00000004 TimingDelay
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
08000ee0  w    F .text	00000002 RTC_Alarm_IRQHandler
08000ee0  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08000188 g     F .text	0000003c STM_EVAL_LEDInit
08000d54 g     F .text	00000028 SYSCFG_DeInit
080007d4 g     F .text	0000000c RCC_HSICmd
08000ee0  w    F .text	00000002 TIM8_CC_IRQHandler
08000800 g     F .text	00000018 RCC_LSEDriveConfig
0800083c g     F .text	0000000c RCC_PLLCmd
08000fe8 g     F .text	00000002 DebugMon_Handler
08000c7c g     F .text	00000018 RCC_AHBPeriphResetCmd
08000e7c g     F .text	00000010 SYSCFG_GetFlagStatus
08000648 g     F .text	00000026 GPIO_PinAFConfig
08000d48 g     F .text	0000000c RCC_ClearITPendingBit
0800061c g     F .text	0000000c GPIO_ReadOutputDataBit
08000ee0  w    F .text	00000002 TIM1_CC_IRQHandler
08000fde g     F .text	00000002 HardFault_Handler
0800021c g     F .text	00000070 STM_EVAL_PBInit
08000ee0  w    F .text	00000002 USB_HP_IRQHandler
08000fec g     F .text	00000004 SysTick_Handler
08000868 g     F .text	0000000c RCC_MCOConfig
08000684 g     F .text	0000005c NVIC_Init
08000ee0  w    F .text	00000002 PVD_IRQHandler
0800115c g       .text	00000000 _sidata
08000fea g     F .text	00000002 PendSV_Handler
08000fdc g     F .text	00000002 NMI_Handler
2000002c g       .bss	00000000 __exidx_end
08000ee0  w    F .text	00000002 EXTI3_IRQHandler
08000cc4 g     F .text	00000018 RCC_ITConfig
08000e04 g     F .text	0000001c SYSCFG_ITConfig
0800115c g       .text	00000000 _etext
20000028 g       .bss	00000000 _sbss
08000e5c g     F .text	00000010 SYSCFG_BypassParityCheckDisable
08000874 g     F .text	00000014 RCC_SYSCLKConfig
080002a4 g     F .text	00000034 EXTI_DeInit
0800078c g     F .text	00000034 RCC_WaitForHSEStartUp
20000020 g     O .data	00000004 BUTTON_PORT
08000c28 g     F .text	0000000c RCC_BackupResetCmd
080006e0 g     F .text	00000014 NVIC_SetVectorTable
0800085c g     F .text	0000000c RCC_ClockSecuritySystemCmd
08000ee0  w    F .text	00000002 EXTI0_IRQHandler
08000ee0  w    F .text	00000002 I2C2_EV_IRQHandler
08000d24 g     F .text	00000010 RCC_ClearFlag
08001110 g     O .text	00000004 BUTTON_CLK
08000ee0  w    F .text	00000002 FPU_IRQHandler
20000024 g     O .data	00000004 SystemCoreClock
08000ee0  w    F .text	00000002 EXTI2_TS_IRQHandler
08000ee0  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800077c g     F .text	00000010 RCC_HSEConfig
08000fe4 g     F .text	00000002 UsageFault_Handler
08000c4c g     F .text	00000018 RCC_APB2PeriphClockCmd
08000ee0  w    F .text	00000002 ADC1_2_IRQHandler
08000550 g     F .text	00000098 GPIO_Init
08000824 g     F .text	00000018 RCC_PLLConfig
08000b38 g     F .text	00000020 RCC_ADCCLKConfig
080010f0 g     O .text	00000010 GPIO_PIN
20000000 g       .data	00000000 _sdata
08000ee0  w    F .text	00000002 SPI1_IRQHandler
0800070c g     F .text	00000016 SysTick_CLKSourceConfig
08000644 g     F .text	00000004 GPIO_Write
08000ee0  w    F .text	00000002 TIM6_DAC_IRQHandler
08000628 g     F .text	00000006 GPIO_ReadOutputData
080007e0 g     F .text	00000020 RCC_LSEConfig
08000c1c g     F .text	0000000c RCC_RTCCLKCmd
08000ee0  w    F .text	00000002 TIM8_UP_IRQHandler
08000c64 g     F .text	00000018 RCC_APB1PeriphClockCmd
08000d34 g     F .text	00000014 RCC_GetITStatus
2000002c g       .bss	00000000 __exidx_start
08000ee0  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000c34 g     F .text	00000018 RCC_AHBPeriphClockCmd
08000ee0  w    F .text	00000002 DMA1_Channel4_IRQHandler
08001144 g     F .text	00000000 _init
08000ee0  w    F .text	00000002 USART3_IRQHandler
0800046c g     F .text	00000018 EXTI_ClearITPendingBit
2000002c g       .bss	00000000 _ebss
08000ee0  w    F .text	00000002 DMA1_Channel7_IRQHandler
08000e9c  w    F .text	00000030 Reset_Handler
08000614 g     F .text	00000006 GPIO_ReadInputData
08000ee0  w    F .text	00000002 CAN1_RX1_IRQHandler
08000ee0  w    F .text	00000002 UART5_IRQHandler
08000cdc g     F .text	00000048 RCC_GetFlagStatus
08000ee0  w    F .text	00000002 ADC3_IRQHandler
08000de8 g     F .text	0000001c SYSCFG_I2CFastModePlusConfig
08000e4c g     F .text	00000010 SYSCFG_BreakConfig
08000630 g     F .text	00000004 GPIO_SetBits
08000ee0  w    F .text	00000002 TIM4_IRQHandler
0800040c g     F .text	00000020 EXTI_GetFlagStatus
08000888 g     F .text	00000010 RCC_GetSYSCLKSource
08000638 g     F .text	0000000a GPIO_WriteBit
08000ee0  w    F .text	00000002 DMA2_Channel1_IRQHandler
08000ee0  w    F .text	00000002 I2C1_EV_IRQHandler
08001114 g     O .text	00000002 BUTTON_PIN
080008d4 g     F .text	00000264 RCC_GetClocksFreq
08000ee0  w    F .text	00000002 DMA1_Channel6_IRQHandler
08000ee0  w    F .text	00000002 UART4_IRQHandler
08000ee0  w    F .text	00000002 DMA2_Channel4_IRQHandler
080003ec g     F .text	00000020 EXTI_GenerateSWInterrupt
20000000 g     O .data	00000020 GPIO_PORT
08000ee0  w    F .text	00000002 TIM3_IRQHandler
08000ee0  w    F .text	00000002 RCC_IRQHandler
20000028 g       .bss	00000000 _bss
08000ee0  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000ee0 g       .text	00000002 Default_Handler
08000ee0  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
0800042c g     F .text	00000018 EXTI_ClearFlag
08000c00 g     F .text	00000010 RCC_RTCCLKConfig
08000ee0  w    F .text	00000002 EXTI15_10_IRQHandler
080001e0 g     F .text	0000001c STM_EVAL_LEDOff
08000e6c g     F .text	00000010 SYSCFG_SRAMWRPEnable
080002d8 g     F .text	00000104 EXTI_Init
08000634 g     F .text	00000004 GPIO_ResetBits
08000ee0  w    F .text	00000002 TIM7_IRQHandler
080010d0 g     O .text	00000020 GPIO_CLK
08000ee0  w    F .text	00000002 EXTI9_5_IRQHandler
08000ee0  w    F .text	00000002 TAMPER_STAMP_IRQHandler
08000ee0  w    F .text	00000002 RTC_WKUP_IRQHandler
08000444 g     F .text	00000028 EXTI_GetITStatus
08000ee0  w    F .text	00000002 SPI2_IRQHandler
08000d7c g     F .text	00000014 SYSCFG_MemoryRemapConfig
08000fe0 g     F .text	00000002 MemManage_Handler
080007c0 g     F .text	00000014 RCC_AdjustHSICalibrationValue
08001008 g     F .text	000000b4 main
08000fe6 g     F .text	00000002 SVC_Handler
08000ee0  w    F .text	00000002 DMA2_Channel5_IRQHandler
080008ac g     F .text	00000014 RCC_PCLK1Config
08001104 g     O .text	00000001 BUTTON_PIN_SOURCE
080003dc g     F .text	0000000e EXTI_StructInit
08000ee0  w    F .text	00000002 DMA1_Channel5_IRQHandler
08000bf4 g     F .text	0000000c RCC_USBCLKConfig
08000ee0  w    F .text	00000002 USB_LP_IRQHandler
08000ee0  w    F .text	00000002 EXTI4_IRQHandler
08000ee0  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
080008c0 g     F .text	00000014 RCC_PCLK2Config
08000ee4 g     F .text	000000f8 SystemInit
08000484 g     F .text	000000cc GPIO_DeInit
08001150 g     F .text	00000000 _fini
08000ee0  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08000ee0  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08000724 g     F .text	00000058 RCC_DeInit
08000ee0  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000d90 g     F .text	00000018 SYSCFG_DMAChannelRemapConfig
08000ee0  w    F .text	00000002 ADC4_IRQHandler
080006f4 g     F .text	00000018 NVIC_SystemLPConfig
08000dc4 g     F .text	00000018 SYSCFG_EncoderRemapConfig
08000ee0  w    F .text	00000002 WWDG_IRQHandler
08000cac g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
08000848 g     F .text	00000014 RCC_PREDIV1Config
08000ff0 g     F .text	00000018 Delay
0800028c g     F .text	00000018 STM_EVAL_PBGetState
08000ee0  w    F .text	00000002 TIM2_IRQHandler
080005e8 g     F .text	0000000e GPIO_StructInit
080001fc g     F .text	00000020 STM_EVAL_LEDToggle
08000da8 g     F .text	0000001c SYSCFG_TriggerRemapConfig
0800110c g     O .text	00000002 BUTTON_EXTI_LINE
08000ee0  w    F .text	00000002 COMP7_IRQHandler
2000a000 g       *ABS*	00000000 _estack
08000ee0  w    F .text	00000002 COMP1_2_3_IRQHandler
08000ee0  w    F .text	00000002 EXTI1_IRQHandler
20000028 g       .data	00000000 _edata
08000ddc g     F .text	0000000c SYSCFG_USBInterruptLineRemapCmd
08000ee0  w    F .text	00000002 USART2_IRQHandler
08000e20 g     F .text	0000002c SYSCFG_EXTILineConfig
08000ee0  w    F .text	00000002 COMP4_5_6_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000b98 g     F .text	0000005c RCC_USARTCLKConfig
08000ee0  w    F .text	00000002 I2C2_ER_IRQHandler
08000ee0  w    F .text	00000002 DMA1_Channel2_IRQHandler
08000b78 g     F .text	00000020 RCC_TIMCLKConfig
080010bc g     F .text	00000014 TimingDelay_Decrement
08000ee0  w    F .text	00000002 TIM8_BRK_IRQHandler
08000b58 g     F .text	00000020 RCC_I2CCLKConfig
08000ee0  w    F .text	00000002 CAN1_SCE_IRQHandler
08000c10 g     F .text	0000000c RCC_I2SCLKConfig
08001108 g     O .text	00000001 BUTTON_PORT_SOURCE
08000ee0  w    F .text	00000002 FLASH_IRQHandler
080005f8 g     F .text	00000010 GPIO_PinLockConfig
08000fe2 g     F .text	00000002 BusFault_Handler
08000ee0  w    F .text	00000002 USART1_IRQHandler
08000818 g     F .text	0000000c RCC_LSICmd
08000ee0  w    F .text	00000002 SPI3_IRQHandler
08000c94 g     F .text	00000018 RCC_APB2PeriphResetCmd
08000ee0  w    F .text	00000002 I2C1_ER_IRQHandler
08000670 g     F .text	00000014 NVIC_PriorityGroupConfig
080001c4 g     F .text	0000001c STM_EVAL_LEDOn
08000e8c g     F .text	00000010 SYSCFG_ClearFlag
08001100 g     O .text	00000001 BUTTON_IRQn
08000608 g     F .text	0000000c GPIO_ReadInputDataBit
08000ee0  w    F .text	00000002 USBWakeUp_IRQHandler
08000898 g     F .text	00000014 RCC_HCLKConfig
08000ee0  w    F .text	00000002 DMA2_Channel3_IRQHandler
08000ee0  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <STM_EVAL_LEDInit>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000188:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800018a:	4d0b      	ldr	r5, [pc, #44]	@ (80001b8 <STM_EVAL_LEDInit+0x30>)
{
 800018c:	b083      	sub	sp, #12
 800018e:	4604      	mov	r4, r0
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000190:	2101      	movs	r1, #1
 8000192:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8000196:	f000 fd4d 	bl	8000c34 <RCC_AHBPeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800019a:	eb05 0544 	add.w	r5, r5, r4, lsl #1
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800019e:	4a07      	ldr	r2, [pc, #28]	@ (80001bc <STM_EVAL_LEDInit+0x34>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80001a0:	4b07      	ldr	r3, [pc, #28]	@ (80001c0 <STM_EVAL_LEDInit+0x38>)
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80001a2:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80001a6:	8c2a      	ldrh	r2, [r5, #32]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80001a8:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80001aa:	e9cd 2300 	strd	r2, r3, [sp]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80001ae:	f000 f9cf 	bl	8000550 <GPIO_Init>
}
 80001b2:	b003      	add	sp, #12
 80001b4:	bd30      	pop	{r4, r5, pc}
 80001b6:	bf00      	nop
 80001b8:	080010d0 	.word	0x080010d0
 80001bc:	20000000 	.word	0x20000000
 80001c0:	01000301 	.word	0x01000301

080001c4 <STM_EVAL_LEDOn>:
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <STM_EVAL_LEDOn+0x14>)
 80001c6:	4a05      	ldr	r2, [pc, #20]	@ (80001dc <STM_EVAL_LEDOn+0x18>)
 80001c8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80001cc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80001d0:	8c1b      	ldrh	r3, [r3, #32]
 80001d2:	6193      	str	r3, [r2, #24]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	080010d0 	.word	0x080010d0
 80001dc:	20000000 	.word	0x20000000

080001e0 <STM_EVAL_LEDOff>:
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BRR = GPIO_PIN[Led];  
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <STM_EVAL_LEDOff+0x14>)
 80001e2:	4a05      	ldr	r2, [pc, #20]	@ (80001f8 <STM_EVAL_LEDOff+0x18>)
 80001e4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80001e8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80001ec:	8c1b      	ldrh	r3, [r3, #32]
 80001ee:	8513      	strh	r3, [r2, #40]	@ 0x28
}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	080010d0 	.word	0x080010d0
 80001f8:	20000000 	.word	0x20000000

080001fc <STM_EVAL_LEDToggle>:
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80001fc:	4a05      	ldr	r2, [pc, #20]	@ (8000214 <STM_EVAL_LEDToggle+0x18>)
 80001fe:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <STM_EVAL_LEDToggle+0x1c>)
 8000200:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8000204:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8000208:	8a91      	ldrh	r1, [r2, #20]
 800020a:	8c1b      	ldrh	r3, [r3, #32]
 800020c:	404b      	eors	r3, r1
 800020e:	b29b      	uxth	r3, r3
 8000210:	8293      	strh	r3, [r2, #20]
}
 8000212:	4770      	bx	lr
 8000214:	20000000 	.word	0x20000000
 8000218:	080010d0 	.word	0x080010d0

0800021c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	4605      	mov	r5, r0
 8000220:	b086      	sub	sp, #24
 8000222:	460c      	mov	r4, r1
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8000224:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000228:	2101      	movs	r1, #1
 800022a:	f000 fd03 	bl	8000c34 <RCC_AHBPeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800022e:	2101      	movs	r1, #1
 8000230:	4608      	mov	r0, r1
 8000232:	f000 fd0b 	bl	8000c4c <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000236:	4813      	ldr	r0, [pc, #76]	@ (8000284 <STM_EVAL_PBInit+0x68>)
 8000238:	eb00 0085 	add.w	r0, r0, r5, lsl #2
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800023c:	2600      	movs	r6, #0
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800023e:	2301      	movs	r3, #1
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000240:	6a00      	ldr	r0, [r0, #32]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000242:	f88d 600c 	strb.w	r6, [sp, #12]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000246:	a902      	add	r1, sp, #8
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000248:	f88d 600f 	strb.w	r6, [sp, #15]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800024c:	9302      	str	r3, [sp, #8]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800024e:	f000 f97f 	bl	8000550 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8000252:	2c01      	cmp	r4, #1
 8000254:	d001      	beq.n	800025a <STM_EVAL_PBInit+0x3e>
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
  }
}
 8000256:	b006      	add	sp, #24
 8000258:	bd70      	pop	{r4, r5, r6, pc}
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800025a:	4631      	mov	r1, r6
 800025c:	4630      	mov	r0, r6
 800025e:	f000 fddf 	bl	8000e20 <SYSCFG_EXTILineConfig>
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000262:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    EXTI_Init(&EXTI_InitStructure);
 8000266:	a804      	add	r0, sp, #16
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000268:	f8ad 3014 	strh.w	r3, [sp, #20]
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800026c:	9604      	str	r6, [sp, #16]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800026e:	f88d 4016 	strb.w	r4, [sp, #22]
    EXTI_Init(&EXTI_InitStructure);
 8000272:	f000 f831 	bl	80002d8 <EXTI_Init>
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000276:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <STM_EVAL_PBInit+0x6c>)
 8000278:	9301      	str	r3, [sp, #4]
    NVIC_Init(&NVIC_InitStructure); 
 800027a:	a801      	add	r0, sp, #4
 800027c:	f000 fa02 	bl	8000684 <NVIC_Init>
}
 8000280:	b006      	add	sp, #24
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	20000000 	.word	0x20000000
 8000288:	010f0f06 	.word	0x010f0f06

0800028c <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 800028c:	b508      	push	{r3, lr}
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <STM_EVAL_PBGetState+0x14>)
 8000290:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000294:	2101      	movs	r1, #1
 8000296:	6a18      	ldr	r0, [r3, #32]
 8000298:	f000 f9b6 	bl	8000608 <GPIO_ReadInputDataBit>
}
 800029c:	bd08      	pop	{r3, pc}
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000

080002a4 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR    = 0x1F800000;
 80002a4:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <EXTI_DeInit+0x30>)
{
 80002a6:	b410      	push	{r4}
  EXTI->EMR    = 0x00000000;
 80002a8:	2200      	movs	r2, #0
  EXTI->IMR    = 0x1F800000;
 80002aa:	f04f 54fc 	mov.w	r4, #528482304	@ 0x1f800000
  EXTI->RTSR   = 0x00000000;
  EXTI->FTSR   = 0x00000000;
  EXTI->SWIER  = 0x00000000;
  EXTI->PR     = 0xE07FFFFF;
 80002ae:	f06f 51fc 	mvn.w	r1, #528482304	@ 0x1f800000
  EXTI->IMR    = 0x1F800000;
 80002b2:	601c      	str	r4, [r3, #0]
  EXTI->IMR2   = 0x0000000C;
 80002b4:	200c      	movs	r0, #12
  EXTI->EMR    = 0x00000000;
 80002b6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR   = 0x00000000;
 80002b8:	609a      	str	r2, [r3, #8]
  EXTI->FTSR   = 0x00000000;
 80002ba:	60da      	str	r2, [r3, #12]
  EXTI->SWIER  = 0x00000000;
 80002bc:	611a      	str	r2, [r3, #16]
  EXTI->PR     = 0xE07FFFFF;
 80002be:	6159      	str	r1, [r3, #20]
  EXTI->EMR2   = 0x00000000;
  EXTI->RTSR2  = 0x00000000;
  EXTI->FTSR2  = 0x00000000;
  EXTI->SWIER2 = 0x00000000;
  EXTI->PR2    = 0x00000003;
 80002c0:	2103      	movs	r1, #3
  EXTI->IMR2   = 0x0000000C;
 80002c2:	6218      	str	r0, [r3, #32]
}
 80002c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  EXTI->EMR2   = 0x00000000;
 80002c8:	625a      	str	r2, [r3, #36]	@ 0x24
  EXTI->RTSR2  = 0x00000000;
 80002ca:	629a      	str	r2, [r3, #40]	@ 0x28
  EXTI->FTSR2  = 0x00000000;
 80002cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  EXTI->SWIER2 = 0x00000000;
 80002ce:	631a      	str	r2, [r3, #48]	@ 0x30
  EXTI->PR2    = 0x00000003;
 80002d0:	6359      	str	r1, [r3, #52]	@ 0x34
}
 80002d2:	4770      	bx	lr
 80002d4:	40010400 	.word	0x40010400

080002d8 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80002d8:	b470      	push	{r4, r5, r6}
  tmp = (uint32_t)EXTI_BASE;
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 80002da:	6803      	ldr	r3, [r0, #0]
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80002dc:	7984      	ldrb	r4, [r0, #6]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 80002de:	f003 021f 	and.w	r2, r3, #31
 80002e2:	2101      	movs	r1, #1
 80002e4:	fa01 f202 	lsl.w	r2, r1, r2
 80002e8:	095b      	lsrs	r3, r3, #5
 80002ea:	43d2      	mvns	r2, r2
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80002ec:	2c00      	cmp	r4, #0
 80002ee:	d04e      	beq.n	800038e <EXTI_Init+0xb6>
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 80002f0:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80002f4:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80002f8:	015b      	lsls	r3, r3, #5
 80002fa:	681c      	ldr	r4, [r3, #0]
 80002fc:	4022      	ands	r2, r4
 80002fe:	601a      	str	r2, [r3, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000300:	6803      	ldr	r3, [r0, #0]
 8000302:	4c33      	ldr	r4, [pc, #204]	@ (80003d0 <EXTI_Init+0xf8>)
 8000304:	f023 051f 	bic.w	r5, r3, #31
 8000308:	f003 031f 	and.w	r3, r3, #31
 800030c:	592a      	ldr	r2, [r5, r4]
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
 8000312:	ea22 0303 	bic.w	r3, r2, r3
 8000316:	512b      	str	r3, [r5, r4]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000318:	7902      	ldrb	r2, [r0, #4]
 800031a:	6803      	ldr	r3, [r0, #0]
 800031c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8000320:	f023 041f 	bic.w	r4, r3, #31
 8000324:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000328:	f003 031f 	and.w	r3, r3, #31
 800032c:	58a5      	ldr	r5, [r4, r2]
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	432b      	orrs	r3, r5
 8000334:	50a3      	str	r3, [r4, r2]
    
    tmp = (uint32_t)EXTI_BASE;

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000336:	6803      	ldr	r3, [r0, #0]
 8000338:	4c26      	ldr	r4, [pc, #152]	@ (80003d4 <EXTI_Init+0xfc>)
 800033a:	f023 051f 	bic.w	r5, r3, #31
 800033e:	f003 031f 	and.w	r3, r3, #31
 8000342:	592a      	ldr	r2, [r5, r4]
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	ea22 0303 	bic.w	r3, r2, r3
 800034c:	512b      	str	r3, [r5, r4]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800034e:	6803      	ldr	r3, [r0, #0]
 8000350:	4d21      	ldr	r5, [pc, #132]	@ (80003d8 <EXTI_Init+0x100>)
 8000352:	f023 0c1f 	bic.w	ip, r3, #31
 8000356:	f003 031f 	and.w	r3, r3, #31
 800035a:	f85c 2005 	ldr.w	r2, [ip, r5]
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	ea22 0303 	bic.w	r3, r2, r3
 8000366:	f84c 3005 	str.w	r3, [ip, r5]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800036a:	7943      	ldrb	r3, [r0, #5]
 800036c:	2b10      	cmp	r3, #16
 800036e:	d019      	beq.n	80003a4 <EXTI_Init+0xcc>
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
    }
    else
    {
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000370:	6802      	ldr	r2, [r0, #0]
 8000372:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000376:	f022 001f 	bic.w	r0, r2, #31
 800037a:	f503 3382 	add.w	r3, r3, #66560	@ 0x10400

      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800037e:	f002 021f 	and.w	r2, r2, #31
 8000382:	4091      	lsls	r1, r2
 8000384:	58c2      	ldr	r2, [r0, r3]
 8000386:	4311      	orrs	r1, r2

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 8000388:	bc70      	pop	{r4, r5, r6}
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800038a:	50c1      	str	r1, [r0, r3]
}
 800038c:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 800038e:	7901      	ldrb	r1, [r0, #4]
 8000390:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8000394:	015b      	lsls	r3, r3, #5
 8000396:	f501 3182 	add.w	r1, r1, #66560	@ 0x10400
}
 800039a:	bc70      	pop	{r4, r5, r6}
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800039c:	58c8      	ldr	r0, [r1, r3]
 800039e:	4002      	ands	r2, r0
 80003a0:	50ca      	str	r2, [r1, r3]
}
 80003a2:	4770      	bx	lr
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80003a4:	6803      	ldr	r3, [r0, #0]
 80003a6:	f023 021f 	bic.w	r2, r3, #31
 80003aa:	f003 031f 	and.w	r3, r3, #31
 80003ae:	5916      	ldr	r6, [r2, r4]
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	4333      	orrs	r3, r6
 80003b6:	5113      	str	r3, [r2, r4]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 80003b8:	6803      	ldr	r3, [r0, #0]
 80003ba:	f023 021f 	bic.w	r2, r3, #31
 80003be:	f003 031f 	and.w	r3, r3, #31
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	5951      	ldr	r1, [r2, r5]
 80003c8:	430b      	orrs	r3, r1
 80003ca:	5153      	str	r3, [r2, r5]
}
 80003cc:	bc70      	pop	{r4, r5, r6}
 80003ce:	4770      	bx	lr
 80003d0:	40010404 	.word	0x40010404
 80003d4:	40010408 	.word	0x40010408
 80003d8:	4001040c 	.word	0x4001040c

080003dc <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80003dc:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80003de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80003e2:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80003e4:	8082      	strh	r2, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Rising_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80003e6:	7183      	strb	r3, [r0, #6]
}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop

080003ec <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
 80003ec:	f020 011f 	bic.w	r1, r0, #31
 80003f0:	4a05      	ldr	r2, [pc, #20]	@ (8000408 <EXTI_GenerateSWInterrupt+0x1c>)
{
 80003f2:	b410      	push	{r4}
  *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
 80003f4:	f000 001f 	and.w	r0, r0, #31
 80003f8:	588c      	ldr	r4, [r1, r2]
 80003fa:	2301      	movs	r3, #1
 80003fc:	4083      	lsls	r3, r0
 80003fe:	4323      	orrs	r3, r4
 8000400:	508b      	str	r3, [r1, r2]

}
 8000402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40010410 	.word	0x40010410

0800040c <EXTI_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   
  if ((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20)& (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET)
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <EXTI_GetFlagStatus+0x1c>)
 800040e:	f020 021f 	bic.w	r2, r0, #31
 8000412:	f000 001f 	and.w	r0, r0, #31
 8000416:	58d2      	ldr	r2, [r2, r3]
 8000418:	2301      	movs	r3, #1
 800041a:	4083      	lsls	r3, r0
 800041c:	4213      	tst	r3, r2
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800041e:	bf14      	ite	ne
 8000420:	2001      	movne	r0, #1
 8000422:	2000      	moveq	r0, #0
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40010414 	.word	0x40010414

0800042c <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));  
 800042c:	f020 011f 	bic.w	r1, r0, #31
 8000430:	4a03      	ldr	r2, [pc, #12]	@ (8000440 <EXTI_ClearFlag+0x14>)
 8000432:	f000 001f 	and.w	r0, r0, #31
 8000436:	2301      	movs	r3, #1
 8000438:	4083      	lsls	r3, r0
 800043a:	508b      	str	r3, [r1, r2]
}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40010414 	.word	0x40010414

08000444 <EXTI_GetITStatus>:
  uint32_t enablestatus = 0;
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8000444:	f020 031f 	bic.w	r3, r0, #31
 8000448:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800044c:	f503 3382 	add.w	r3, r3, #66560	@ 0x10400
 8000450:	f000 001f 	and.w	r0, r0, #31
 8000454:	6819      	ldr	r1, [r3, #0]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000456:	695b      	ldr	r3, [r3, #20]
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8000458:	2201      	movs	r2, #1
 800045a:	4082      	lsls	r2, r0
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800045c:	ea12 0003 	ands.w	r0, r2, r3
 8000460:	d003      	beq.n	800046a <EXTI_GetITStatus+0x26>
 8000462:	4211      	tst	r1, r2
 8000464:	bf14      	ite	ne
 8000466:	2001      	movne	r0, #1
 8000468:	2000      	moveq	r0, #0
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 800046a:	4770      	bx	lr

0800046c <EXTI_ClearITPendingBit>:
  * @brief  Clears the EXTI's line pending bits.
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
 800046c:	f020 011f 	bic.w	r1, r0, #31
 8000470:	4a03      	ldr	r2, [pc, #12]	@ (8000480 <EXTI_ClearITPendingBit+0x14>)
 8000472:	f000 001f 	and.w	r0, r0, #31
 8000476:	2301      	movs	r3, #1
 8000478:	4083      	lsls	r3, r0
 800047a:	508b      	str	r3, [r1, r2]
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40010414 	.word	0x40010414

08000484 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8000484:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
{
 8000488:	b508      	push	{r3, lr}
  if(GPIOx == GPIOA)
 800048a:	d01b      	beq.n	80004c4 <GPIO_DeInit+0x40>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 800048c:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <GPIO_DeInit+0xb8>)
 800048e:	4298      	cmp	r0, r3
 8000490:	d024      	beq.n	80004dc <GPIO_DeInit+0x58>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 8000492:	4b2b      	ldr	r3, [pc, #172]	@ (8000540 <GPIO_DeInit+0xbc>)
 8000494:	4298      	cmp	r0, r3
 8000496:	d02d      	beq.n	80004f4 <GPIO_DeInit+0x70>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 8000498:	4b2a      	ldr	r3, [pc, #168]	@ (8000544 <GPIO_DeInit+0xc0>)
 800049a:	4298      	cmp	r0, r3
 800049c:	d006      	beq.n	80004ac <GPIO_DeInit+0x28>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
 800049e:	4b2a      	ldr	r3, [pc, #168]	@ (8000548 <GPIO_DeInit+0xc4>)
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d033      	beq.n	800050c <GPIO_DeInit+0x88>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 80004a4:	4b29      	ldr	r3, [pc, #164]	@ (800054c <GPIO_DeInit+0xc8>)
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d03c      	beq.n	8000524 <GPIO_DeInit+0xa0>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80004aa:	bd08      	pop	{r3, pc}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 80004ac:	2101      	movs	r1, #1
 80004ae:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80004b2:	f000 fbe3 	bl	8000c7c <RCC_AHBPeriphResetCmd>
}
 80004b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 80004ba:	2100      	movs	r1, #0
 80004bc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80004c0:	f000 bbdc 	b.w	8000c7c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80004c4:	2101      	movs	r1, #1
 80004c6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80004ca:	f000 fbd7 	bl	8000c7c <RCC_AHBPeriphResetCmd>
}
 80004ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80004d2:	2100      	movs	r1, #0
 80004d4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80004d8:	f000 bbd0 	b.w	8000c7c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80004dc:	2101      	movs	r1, #1
 80004de:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80004e2:	f000 fbcb 	bl	8000c7c <RCC_AHBPeriphResetCmd>
}
 80004e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 80004ea:	2100      	movs	r1, #0
 80004ec:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80004f0:	f000 bbc4 	b.w	8000c7c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80004f4:	2101      	movs	r1, #1
 80004f6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80004fa:	f000 fbbf 	bl	8000c7c <RCC_AHBPeriphResetCmd>
}
 80004fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000502:	2100      	movs	r1, #0
 8000504:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000508:	f000 bbb8 	b.w	8000c7c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 800050c:	2101      	movs	r1, #1
 800050e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000512:	f000 fbb3 	bl	8000c7c <RCC_AHBPeriphResetCmd>
}
 8000516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 800051a:	2100      	movs	r1, #0
 800051c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000520:	f000 bbac 	b.w	8000c7c <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8000524:	2101      	movs	r1, #1
 8000526:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800052a:	f000 fba7 	bl	8000c7c <RCC_AHBPeriphResetCmd>
}
 800052e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8000532:	2100      	movs	r1, #0
 8000534:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000538:	f000 bba0 	b.w	8000c7c <RCC_AHBPeriphResetCmd>
 800053c:	48000400 	.word	0x48000400
 8000540:	48000800 	.word	0x48000800
 8000544:	48000c00 	.word	0x48000c00
 8000548:	48001000 	.word	0x48001000
 800054c:	48001400 	.word	0x48001400

08000550 <GPIO_Init>:
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000550:	2200      	movs	r2, #0
{ 
 8000552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000556:	4613      	mov	r3, r2
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000558:	680d      	ldr	r5, [r1, #0]
    pos = ((uint32_t)0x01) << pinpos;
 800055a:	f04f 0e01 	mov.w	lr, #1
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800055e:	2603      	movs	r6, #3
 8000560:	e004      	b.n	800056c <GPIO_Init+0x1c>
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000562:	3301      	adds	r3, #1
 8000564:	2b10      	cmp	r3, #16
 8000566:	f102 0202 	add.w	r2, r2, #2
 800056a:	d03b      	beq.n	80005e4 <GPIO_Init+0x94>
    pos = ((uint32_t)0x01) << pinpos;
 800056c:	fa0e f903 	lsl.w	r9, lr, r3
    if (currentpin == pos)
 8000570:	ea39 0405 	bics.w	r4, r9, r5
 8000574:	d1f5      	bne.n	8000562 <GPIO_Init+0x12>
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000576:	790c      	ldrb	r4, [r1, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000578:	fa04 f702 	lsl.w	r7, r4, r2
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800057c:	3c01      	subs	r4, #1

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800057e:	fa06 f802 	lsl.w	r8, r6, r2
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000582:	2c01      	cmp	r4, #1
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000584:	ea6f 0c08 	mvn.w	ip, r8
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000588:	d817      	bhi.n	80005ba <GPIO_Init+0x6a>
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800058a:	6884      	ldr	r4, [r0, #8]
 800058c:	ea04 040c 	and.w	r4, r4, ip
 8000590:	6084      	str	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000592:	794c      	ldrb	r4, [r1, #5]
 8000594:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000598:	4094      	lsls	r4, r2
 800059a:	ea44 040a 	orr.w	r4, r4, sl
 800059e:	6084      	str	r4, [r0, #8]
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80005a0:	8884      	ldrh	r4, [r0, #4]
 80005a2:	b2a4      	uxth	r4, r4
 80005a4:	ea24 0409 	bic.w	r4, r4, r9
 80005a8:	8084      	strh	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005aa:	798c      	ldrb	r4, [r1, #6]
 80005ac:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 80005b0:	409c      	lsls	r4, r3
 80005b2:	ea44 0409 	orr.w	r4, r4, r9
 80005b6:	b2a4      	uxth	r4, r4
 80005b8:	8084      	strh	r4, [r0, #4]
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80005ba:	6804      	ldr	r4, [r0, #0]
 80005bc:	ea04 040c 	and.w	r4, r4, ip
 80005c0:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80005c2:	6804      	ldr	r4, [r0, #0]
 80005c4:	433c      	orrs	r4, r7
 80005c6:	6004      	str	r4, [r0, #0]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005c8:	68c4      	ldr	r4, [r0, #12]
 80005ca:	ea24 0408 	bic.w	r4, r4, r8
 80005ce:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005d0:	79cc      	ldrb	r4, [r1, #7]
 80005d2:	68c7      	ldr	r7, [r0, #12]
 80005d4:	4094      	lsls	r4, r2
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005d6:	3301      	adds	r3, #1
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005d8:	433c      	orrs	r4, r7
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005da:	2b10      	cmp	r3, #16
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005dc:	60c4      	str	r4, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005de:	f102 0202 	add.w	r2, r2, #2
 80005e2:	d1c3      	bne.n	800056c <GPIO_Init+0x1c>
    }
  }
}
 80005e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080005e8 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80005e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f0:	e9c0 2300 	strd	r2, r3, [r0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop

080005f8 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80005f8:	f441 3380 	orr.w	r3, r1, #65536	@ 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80005fc:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80005fe:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000600:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000602:	69c3      	ldr	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000604:	69c3      	ldr	r3, [r0, #28]
}
 8000606:	4770      	bx	lr

08000608 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000608:	8a03      	ldrh	r3, [r0, #16]
 800060a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800060c:	bf14      	ite	ne
 800060e:	2001      	movne	r0, #1
 8000610:	2000      	moveq	r0, #0
 8000612:	4770      	bx	lr

08000614 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000614:	8a00      	ldrh	r0, [r0, #16]
}
 8000616:	b280      	uxth	r0, r0
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800061c:	8a83      	ldrh	r3, [r0, #20]
 800061e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000620:	bf14      	ite	ne
 8000622:	2001      	movne	r0, #1
 8000624:	2000      	moveq	r0, #0
 8000626:	4770      	bx	lr

08000628 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8000628:	8a80      	ldrh	r0, [r0, #20]
}
 800062a:	b280      	uxth	r0, r0
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000630:	6181      	str	r1, [r0, #24]
}
 8000632:	4770      	bx	lr

08000634 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000634:	8501      	strh	r1, [r0, #40]	@ 0x28
}
 8000636:	4770      	bx	lr

08000638 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000638:	b10a      	cbz	r2, 800063e <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800063a:	6181      	str	r1, [r0, #24]
 800063c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 800063e:	8501      	strh	r1, [r0, #40]	@ 0x28
  }
}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8000644:	8281      	strh	r1, [r0, #20]
}
 8000646:	4770      	bx	lr

08000648 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000648:	08cb      	lsrs	r3, r1, #3
 800064a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800064e:	f001 0107 	and.w	r1, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000652:	6a03      	ldr	r3, [r0, #32]
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000654:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000656:	f04f 0c0f 	mov.w	ip, #15
 800065a:	fa0c fc01 	lsl.w	ip, ip, r1
 800065e:	ea23 030c 	bic.w	r3, r3, ip
 8000662:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000664:	6a03      	ldr	r3, [r0, #32]
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000666:	408a      	lsls	r2, r1
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000668:	431a      	orrs	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800066a:	6202      	str	r2, [r0, #32]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000670:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <NVIC_PriorityGroupConfig+0x10>)
 8000672:	f040 60bf 	orr.w	r0, r0, #100139008	@ 0x5f80000
 8000676:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800067a:	60d8      	str	r0, [r3, #12]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000684:	b510      	push	{r4, lr}

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000686:	7802      	ldrb	r2, [r0, #0]
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000688:	78c3      	ldrb	r3, [r0, #3]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800068a:	2401      	movs	r4, #1
 800068c:	f002 011f 	and.w	r1, r2, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000690:	ea4f 1c52 	mov.w	ip, r2, lsr #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000694:	408c      	lsls	r4, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000696:	b1c3      	cbz	r3, 80006ca <NVIC_Init+0x46>
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <NVIC_Init+0x54>)
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800069a:	f890 e001 	ldrb.w	lr, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800069e:	68d9      	ldr	r1, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80006a0:	7883      	ldrb	r3, [r0, #2]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80006a2:	43c9      	mvns	r1, r1
 80006a4:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmpsub = tmpsub >> tmppriority;
 80006a8:	200f      	movs	r0, #15
 80006aa:	40c8      	lsrs	r0, r1
    tmppre = (0x4 - tmppriority);
 80006ac:	f1c1 0104 	rsb	r1, r1, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80006b0:	fa0e f101 	lsl.w	r1, lr, r1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80006b4:	4003      	ands	r3, r0
 80006b6:	430b      	orrs	r3, r1
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80006b8:	4908      	ldr	r1, [pc, #32]	@ (80006dc <NVIC_Init+0x58>)
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	440a      	add	r2, r1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f882 3300 	strb.w	r3, [r2, #768]	@ 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006c4:	f841 402c 	str.w	r4, [r1, ip, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80006c8:	bd10      	pop	{r4, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <NVIC_Init+0x58>)
 80006cc:	f10c 0c20 	add.w	ip, ip, #32
 80006d0:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
}
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80006e0:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
 80006e4:	4b02      	ldr	r3, [pc, #8]	@ (80006f0 <NVIC_SetVectorTable+0x10>)
 80006e6:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 80006ea:	4301      	orrs	r1, r0
 80006ec:	6099      	str	r1, [r3, #8]
}
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80006f4:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <NVIC_SystemLPConfig+0x14>)
 80006f6:	6913      	ldr	r3, [r2, #16]
  if (NewState != DISABLE)
 80006f8:	b111      	cbz	r1, 8000700 <NVIC_SystemLPConfig+0xc>
    SCB->SCR |= LowPowerMode;
 80006fa:	4303      	orrs	r3, r0
 80006fc:	6113      	str	r3, [r2, #16]
 80006fe:	4770      	bx	lr
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000700:	ea23 0300 	bic.w	r3, r3, r0
 8000704:	6113      	str	r3, [r2, #16]
  }
}
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800070c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000710:	2804      	cmp	r0, #4
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000712:	6913      	ldr	r3, [r2, #16]
 8000714:	bf0c      	ite	eq
 8000716:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800071a:	f023 0304 	bicne.w	r3, r3, #4
 800071e:	6113      	str	r3, [r2, #16]
  }
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop

08000724 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <RCC_DeInit+0x4c>)

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8000726:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <RCC_DeInit+0x50>)
  RCC->CR |= (uint32_t)0x00000001;
 8000728:	6818      	ldr	r0, [r3, #0]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 800072a:	4913      	ldr	r1, [pc, #76]	@ (8000778 <RCC_DeInit+0x54>)
  RCC->CR |= (uint32_t)0x00000001;
 800072c:	f040 0001 	orr.w	r0, r0, #1
{
 8000730:	b410      	push	{r4}
  RCC->CR |= (uint32_t)0x00000001;
 8000732:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8000734:	685c      	ldr	r4, [r3, #4]
 8000736:	4022      	ands	r2, r4
 8000738:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800073a:	681a      	ldr	r2, [r3, #0]
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
}
 800073c:	f85d 4b04 	ldr.w	r4, [sp], #4
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000740:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8000744:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000748:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000750:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	f422 02fe 	bic.w	r2, r2, #8323072	@ 0x7f0000
 8000758:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 800075a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800075c:	f36f 020d 	bfc	r2, #0, #14
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8000762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  RCC->CIR = 0x00000000;
 8000764:	2000      	movs	r0, #0
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8000766:	4011      	ands	r1, r2
 8000768:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->CIR = 0x00000000;
 800076a:	6098      	str	r0, [r3, #8]
}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	f8ffc000 	.word	0xf8ffc000
 8000778:	0f00fccc 	.word	0x0f00fccc

0800077c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 800077c:	4b02      	ldr	r3, [pc, #8]	@ (8000788 <RCC_HSEConfig+0xc>)
 800077e:	2200      	movs	r2, #0
 8000780:	709a      	strb	r2, [r3, #2]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8000782:	7098      	strb	r0, [r3, #2]

}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800078c:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 800078e:	2300      	movs	r3, #0
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000790:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <RCC_WaitForHSEStartUp+0x30>)
  __IO uint32_t StartUpCounter = 0;
 8000792:	9301      	str	r3, [sp, #4]
    statusreg = RCC->CR;
 8000794:	6813      	ldr	r3, [r2, #0]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000796:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
    StartUpCounter++;  
 800079a:	9b01      	ldr	r3, [sp, #4]
 800079c:	f103 0301 	add.w	r3, r3, #1
 80007a0:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80007a2:	9b01      	ldr	r3, [sp, #4]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80007a4:	d005      	beq.n	80007b2 <RCC_WaitForHSEStartUp+0x26>
    statusreg = RCC->CR;
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <RCC_WaitForHSEStartUp+0x30>)
 80007a8:	6818      	ldr	r0, [r3, #0]
}
 80007aa:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80007ae:	b002      	add	sp, #8
 80007b0:	4770      	bx	lr
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80007b2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80007b6:	d1ed      	bne.n	8000794 <RCC_WaitForHSEStartUp+0x8>
 80007b8:	e7f5      	b.n	80007a6 <RCC_WaitForHSEStartUp+0x1a>
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <RCC_AdjustHSICalibrationValue>:
  tmpreg = RCC->CR;
 80007c0:	4a03      	ldr	r2, [pc, #12]	@ (80007d0 <RCC_AdjustHSICalibrationValue+0x10>)
 80007c2:	6813      	ldr	r3, [r2, #0]
  tmpreg &= ~RCC_CR_HSITRIM;
 80007c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80007c8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  RCC->CR = tmpreg;
 80007cc:	6013      	str	r3, [r2, #0]
}
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000

080007d4 <RCC_HSICmd>:
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80007d4:	4b01      	ldr	r3, [pc, #4]	@ (80007dc <RCC_HSICmd+0x8>)
 80007d6:	6018      	str	r0, [r3, #0]
}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	42420000 	.word	0x42420000

080007e0 <RCC_LSEConfig>:
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <RCC_LSEConfig+0x1c>)
 80007e2:	6a1a      	ldr	r2, [r3, #32]
 80007e4:	f022 0201 	bic.w	r2, r2, #1
 80007e8:	621a      	str	r2, [r3, #32]
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 80007ea:	6a1a      	ldr	r2, [r3, #32]
 80007ec:	f022 0204 	bic.w	r2, r2, #4
 80007f0:	621a      	str	r2, [r3, #32]
  RCC->BDCR |= RCC_LSE;
 80007f2:	6a1a      	ldr	r2, [r3, #32]
 80007f4:	4302      	orrs	r2, r0
 80007f6:	621a      	str	r2, [r3, #32]
}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <RCC_LSEDriveConfig>:
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <RCC_LSEDriveConfig+0x14>)
 8000802:	6a1a      	ldr	r2, [r3, #32]
 8000804:	f022 0218 	bic.w	r2, r2, #24
 8000808:	621a      	str	r2, [r3, #32]
  RCC->BDCR |= RCC_LSEDrive;
 800080a:	6a1a      	ldr	r2, [r3, #32]
 800080c:	4302      	orrs	r2, r0
 800080e:	621a      	str	r2, [r3, #32]
}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <RCC_LSICmd>:
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000818:	4b01      	ldr	r3, [pc, #4]	@ (8000820 <RCC_LSICmd+0x8>)
 800081a:	f8c3 0480 	str.w	r0, [r3, #1152]	@ 0x480
}
 800081e:	4770      	bx	lr
 8000820:	42420000 	.word	0x42420000

08000824 <RCC_PLLConfig>:
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <RCC_PLLConfig+0x14>)
 8000826:	6853      	ldr	r3, [r2, #4]
 8000828:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 800082c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 800082e:	6853      	ldr	r3, [r2, #4]
 8000830:	430b      	orrs	r3, r1
 8000832:	4303      	orrs	r3, r0
 8000834:	6053      	str	r3, [r2, #4]
}
 8000836:	4770      	bx	lr
 8000838:	40021000 	.word	0x40021000

0800083c <RCC_PLLCmd>:
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800083c:	4b01      	ldr	r3, [pc, #4]	@ (8000844 <RCC_PLLCmd+0x8>)
 800083e:	6618      	str	r0, [r3, #96]	@ 0x60
}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	42420000 	.word	0x42420000

08000848 <RCC_PREDIV1Config>:
  tmpreg = RCC->CFGR2;
 8000848:	4a03      	ldr	r2, [pc, #12]	@ (8000858 <RCC_PREDIV1Config+0x10>)
 800084a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 800084c:	f023 030f 	bic.w	r3, r3, #15
  tmpreg |= RCC_PREDIV1_Div;
 8000850:	4303      	orrs	r3, r0
  RCC->CFGR2 = tmpreg;
 8000852:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <RCC_ClockSecuritySystemCmd>:
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800085c:	4b01      	ldr	r3, [pc, #4]	@ (8000864 <RCC_ClockSecuritySystemCmd+0x8>)
 800085e:	64d8      	str	r0, [r3, #76]	@ 0x4c
}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	42420000 	.word	0x42420000

08000868 <RCC_MCOConfig>:
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 8000868:	4b01      	ldr	r3, [pc, #4]	@ (8000870 <RCC_MCOConfig+0x8>)
 800086a:	71d8      	strb	r0, [r3, #7]
}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <RCC_SYSCLKConfig>:
  tmpreg = RCC->CFGR;
 8000874:	4a03      	ldr	r2, [pc, #12]	@ (8000884 <RCC_SYSCLKConfig+0x10>)
 8000876:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_SW;
 8000878:	f023 0303 	bic.w	r3, r3, #3
  tmpreg |= RCC_SYSCLKSource;
 800087c:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 800087e:	6053      	str	r3, [r2, #4]
}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <RCC_GetSYSCLKSource>:
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000888:	4b02      	ldr	r3, [pc, #8]	@ (8000894 <RCC_GetSYSCLKSource+0xc>)
 800088a:	6858      	ldr	r0, [r3, #4]
}
 800088c:	f000 000c 	and.w	r0, r0, #12
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <RCC_HCLKConfig>:
  tmpreg = RCC->CFGR;
 8000898:	4a03      	ldr	r2, [pc, #12]	@ (80008a8 <RCC_HCLKConfig+0x10>)
 800089a:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_HPRE;
 800089c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpreg |= RCC_SYSCLK;
 80008a0:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 80008a2:	6053      	str	r3, [r2, #4]
}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <RCC_PCLK1Config>:
  tmpreg = RCC->CFGR;
 80008ac:	4a03      	ldr	r2, [pc, #12]	@ (80008bc <RCC_PCLK1Config+0x10>)
 80008ae:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_PPRE1;
 80008b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
  tmpreg |= RCC_HCLK;
 80008b4:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 80008b6:	6053      	str	r3, [r2, #4]
}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <RCC_PCLK2Config>:
  tmpreg = RCC->CFGR;
 80008c0:	4a03      	ldr	r2, [pc, #12]	@ (80008d0 <RCC_PCLK2Config+0x10>)
 80008c2:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_PPRE2;
 80008c4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
  tmpreg |= RCC_HCLK << 3;
 80008c8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  RCC->CFGR = tmpreg;
 80008cc:	6053      	str	r3, [r2, #4]
}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000

080008d4 <RCC_GetClocksFreq>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008d4:	4a94      	ldr	r2, [pc, #592]	@ (8000b28 <RCC_GetClocksFreq+0x254>)
 80008d6:	6853      	ldr	r3, [r2, #4]
 80008d8:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 80008dc:	2b08      	cmp	r3, #8
{
 80008de:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (tmp)
 80008e0:	d07e      	beq.n	80009e0 <RCC_GetClocksFreq+0x10c>
 80008e2:	4a92      	ldr	r2, [pc, #584]	@ (8000b2c <RCC_GetClocksFreq+0x258>)
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80008e4:	f04f 0e00 	mov.w	lr, #0
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80008e8:	4d8f      	ldr	r5, [pc, #572]	@ (8000b28 <RCC_GetClocksFreq+0x254>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008ea:	6002      	str	r2, [r0, #0]
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80008ec:	6869      	ldr	r1, [r5, #4]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80008ee:	4b90      	ldr	r3, [pc, #576]	@ (8000b30 <RCC_GetClocksFreq+0x25c>)
  tmp = tmp >> 4;
 80008f0:	f3c1 1103 	ubfx	r1, r1, #4, #4
  ahbpresc = APBAHBPrescTable[tmp]; 
 80008f4:	5c5e      	ldrb	r6, [r3, r1]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80008f6:	fa22 f106 	lsr.w	r1, r2, r6
 80008fa:	6041      	str	r1, [r0, #4]
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80008fc:	686c      	ldr	r4, [r5, #4]
  tmp = tmp >> 8;
 80008fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000902:	b2f6      	uxtb	r6, r6
  presc = APBAHBPrescTable[tmp];
 8000904:	5d1c      	ldrb	r4, [r3, r4]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000906:	fa21 f404 	lsr.w	r4, r1, r4
 800090a:	6084      	str	r4, [r0, #8]
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800090c:	686f      	ldr	r7, [r5, #4]
  tmp = tmp >> 11;
 800090e:	f3c7 27c2 	ubfx	r7, r7, #11, #3
  apb2presc = APBAHBPrescTable[tmp];
 8000912:	5ddf      	ldrb	r7, [r3, r7]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000914:	40f9      	lsrs	r1, r7
 8000916:	60c1      	str	r1, [r0, #12]
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000918:	6aed      	ldr	r5, [r5, #44]	@ 0x2c
  tmp = tmp >> 4;
 800091a:	f3c5 1c04 	ubfx	ip, r5, #4, #5
  presc = ADCPrescTable[tmp];
 800091e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  apb2presc = APBAHBPrescTable[tmp];
 8000922:	b2ff      	uxtb	r7, r7
  presc = ADCPrescTable[tmp];
 8000924:	f8bc c010 	ldrh.w	ip, [ip, #16]
  if ((presc & 0x10) != 0)
 8000928:	f01c 0f10 	tst.w	ip, #16
  presc = ADCPrescTable[tmp];
 800092c:	fa1f f58c 	uxth.w	r5, ip
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000930:	bf0c      	ite	eq
 8000932:	4615      	moveq	r5, r2
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000934:	fbbe f5f5 	udivne	r5, lr, r5
 8000938:	6105      	str	r5, [r0, #16]
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800093a:	4d7b      	ldr	r5, [pc, #492]	@ (8000b28 <RCC_GetClocksFreq+0x254>)
 800093c:	6aed      	ldr	r5, [r5, #44]	@ 0x2c
  tmp = tmp >> 9;
 800093e:	f3c5 2544 	ubfx	r5, r5, #9, #5
  presc = ADCPrescTable[tmp];
 8000942:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8000946:	8a1d      	ldrh	r5, [r3, #16]
 8000948:	b2ab      	uxth	r3, r5
  if ((presc & 0x10) != 0)
 800094a:	06ed      	lsls	r5, r5, #27
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800094c:	bf58      	it	pl
 800094e:	4613      	movpl	r3, r2
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000950:	4d75      	ldr	r5, [pc, #468]	@ (8000b28 <RCC_GetClocksFreq+0x254>)
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000952:	bf48      	it	mi
 8000954:	fbbe f3f3 	udivmi	r3, lr, r3
 8000958:	6143      	str	r3, [r0, #20]
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800095a:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800095e:	4b73      	ldr	r3, [pc, #460]	@ (8000b2c <RCC_GetClocksFreq+0x258>)
 8000960:	f01c 0f10 	tst.w	ip, #16
 8000964:	bf0c      	ite	eq
 8000966:	469c      	moveq	ip, r3
 8000968:	4694      	movne	ip, r2
 800096a:	f8c0 c018 	str.w	ip, [r0, #24]
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800096e:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000972:	f01c 0f20 	tst.w	ip, #32
 8000976:	bf18      	it	ne
 8000978:	4613      	movne	r3, r2
 800097a:	61c3      	str	r3, [r0, #28]
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800097c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	d524      	bpl.n	80009cc <RCC_GetClocksFreq+0xf8>
 8000982:	4596      	cmp	lr, r2
 8000984:	d039      	beq.n	80009fa <RCC_GetClocksFreq+0x126>
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000986:	6201      	str	r1, [r0, #32]
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000988:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800098a:	460b      	mov	r3, r1
 800098c:	6243      	str	r3, [r0, #36]	@ 0x24
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800098e:	4b66      	ldr	r3, [pc, #408]	@ (8000b28 <RCC_GetClocksFreq+0x254>)
 8000990:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 8000992:	07ad      	lsls	r5, r5, #30
 8000994:	f040 8098 	bne.w	8000ac8 <RCC_GetClocksFreq+0x1f4>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000998:	6281      	str	r1, [r0, #40]	@ 0x28
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800099a:	4b63      	ldr	r3, [pc, #396]	@ (8000b28 <RCC_GetClocksFreq+0x254>)
 800099c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800099e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 80009a2:	d17c      	bne.n	8000a9e <RCC_GetClocksFreq+0x1ca>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80009a4:	62c4      	str	r4, [r0, #44]	@ 0x2c
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80009a6:	4b60      	ldr	r3, [pc, #384]	@ (8000b28 <RCC_GetClocksFreq+0x254>)
 80009a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80009aa:	f411 2f40 	tst.w	r1, #786432	@ 0xc0000
 80009ae:	d161      	bne.n	8000a74 <RCC_GetClocksFreq+0x1a0>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80009b0:	6304      	str	r4, [r0, #48]	@ 0x30
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80009b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000b28 <RCC_GetClocksFreq+0x254>)
 80009b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80009b6:	f411 1f40 	tst.w	r1, #3145728	@ 0x300000
 80009ba:	d146      	bne.n	8000a4a <RCC_GetClocksFreq+0x176>
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80009bc:	6344      	str	r4, [r0, #52]	@ 0x34
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80009be:	4b5a      	ldr	r3, [pc, #360]	@ (8000b28 <RCC_GetClocksFreq+0x254>)
 80009c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80009c2:	f411 0f40 	tst.w	r1, #12582912	@ 0xc00000
 80009c6:	d12b      	bne.n	8000a20 <RCC_GetClocksFreq+0x14c>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80009c8:	6384      	str	r4, [r0, #56]	@ 0x38
}
 80009ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80009cc:	6201      	str	r1, [r0, #32]
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80009d0:	059b      	lsls	r3, r3, #22
 80009d2:	d5da      	bpl.n	800098a <RCC_GetClocksFreq+0xb6>
 80009d4:	4596      	cmp	lr, r2
 80009d6:	d1d8      	bne.n	800098a <RCC_GetClocksFreq+0xb6>
  && (apb2presc == ahbpresc))
 80009d8:	42be      	cmp	r6, r7
 80009da:	d1d6      	bne.n	800098a <RCC_GetClocksFreq+0xb6>
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80009dc:	0053      	lsls	r3, r2, #1
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80009de:	e7d5      	b.n	800098c <RCC_GetClocksFreq+0xb8>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80009e0:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80009e2:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 80009e4:	f3c3 4e83 	ubfx	lr, r3, #18, #4
      if (pllsource == 0x00)
 80009e8:	03ce      	lsls	r6, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 80009ea:	f10e 0e02 	add.w	lr, lr, #2
      if (pllsource == 0x00)
 80009ee:	d40c      	bmi.n	8000a0a <RCC_GetClocksFreq+0x136>
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80009f0:	4b50      	ldr	r3, [pc, #320]	@ (8000b34 <RCC_GetClocksFreq+0x260>)
 80009f2:	fb03 fe0e 	mul.w	lr, r3, lr
      break;
 80009f6:	4672      	mov	r2, lr
 80009f8:	e776      	b.n	80008e8 <RCC_GetClocksFreq+0x14>
  && (apb2presc == ahbpresc)) 
 80009fa:	42be      	cmp	r6, r7
 80009fc:	d1c3      	bne.n	8000986 <RCC_GetClocksFreq+0xb2>
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80009fe:	0053      	lsls	r3, r2, #1
 8000a00:	6203      	str	r3, [r0, #32]
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000a02:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 8000a04:	05ad      	lsls	r5, r5, #22
 8000a06:	d5c0      	bpl.n	800098a <RCC_GetClocksFreq+0xb6>
 8000a08:	e7c0      	b.n	800098c <RCC_GetClocksFreq+0xb8>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000a0a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000a0c:	4a47      	ldr	r2, [pc, #284]	@ (8000b2c <RCC_GetClocksFreq+0x258>)
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3301      	adds	r3, #1
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a18:	fb0e fe03 	mul.w	lr, lr, r3
      break;
 8000a1c:	4672      	mov	r2, lr
 8000a1e:	e763      	b.n	80008e8 <RCC_GetClocksFreq+0x14>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000a20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a22:	f401 0140 	and.w	r1, r1, #12582912	@ 0xc00000
 8000a26:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8000a2a:	d061      	beq.n	8000af0 <RCC_GetClocksFreq+0x21c>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000a2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a2e:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8000a32:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8000a36:	d06b      	beq.n	8000b10 <RCC_GetClocksFreq+0x23c>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000a3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000a42:	bf04      	itt	eq
 8000a44:	4b39      	ldreq	r3, [pc, #228]	@ (8000b2c <RCC_GetClocksFreq+0x258>)
 8000a46:	6383      	streq	r3, [r0, #56]	@ 0x38
}
 8000a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000a4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a4c:	f401 1140 	and.w	r1, r1, #3145728	@ 0x300000
 8000a50:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000a54:	d050      	beq.n	8000af8 <RCC_GetClocksFreq+0x224>
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000a56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a58:	f401 1140 	and.w	r1, r1, #3145728	@ 0x300000
 8000a5c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000a60:	d05e      	beq.n	8000b20 <RCC_GetClocksFreq+0x24c>
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000a68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000a6c:	bf04      	itt	eq
 8000a6e:	4b2f      	ldreq	r3, [pc, #188]	@ (8000b2c <RCC_GetClocksFreq+0x258>)
 8000a70:	6343      	streq	r3, [r0, #52]	@ 0x34
 8000a72:	e7a4      	b.n	80009be <RCC_GetClocksFreq+0xea>
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000a74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a76:	f401 2140 	and.w	r1, r1, #786432	@ 0xc0000
 8000a7a:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8000a7e:	d039      	beq.n	8000af4 <RCC_GetClocksFreq+0x220>
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000a80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a82:	f401 2140 	and.w	r1, r1, #786432	@ 0xc0000
 8000a86:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8000a8a:	d045      	beq.n	8000b18 <RCC_GetClocksFreq+0x244>
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000a92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000a96:	bf04      	itt	eq
 8000a98:	4b24      	ldreq	r3, [pc, #144]	@ (8000b2c <RCC_GetClocksFreq+0x258>)
 8000a9a:	6303      	streq	r3, [r0, #48]	@ 0x30
 8000a9c:	e789      	b.n	80009b2 <RCC_GetClocksFreq+0xde>
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000a9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000aa0:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
 8000aa4:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8000aa8:	d020      	beq.n	8000aec <RCC_GetClocksFreq+0x218>
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000aaa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000aac:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
 8000ab0:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8000ab4:	d028      	beq.n	8000b08 <RCC_GetClocksFreq+0x234>
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000abc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000ac0:	bf04      	itt	eq
 8000ac2:	4b1a      	ldreq	r3, [pc, #104]	@ (8000b2c <RCC_GetClocksFreq+0x258>)
 8000ac4:	62c3      	streq	r3, [r0, #44]	@ 0x2c
 8000ac6:	e76e      	b.n	80009a6 <RCC_GetClocksFreq+0xd2>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000ac8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000aca:	f001 0103 	and.w	r1, r1, #3
 8000ace:	2901      	cmp	r1, #1
 8000ad0:	d014      	beq.n	8000afc <RCC_GetClocksFreq+0x228>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000ad2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ad4:	f001 0103 	and.w	r1, r1, #3
 8000ad8:	2902      	cmp	r1, #2
 8000ada:	d011      	beq.n	8000b00 <RCC_GetClocksFreq+0x22c>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	2b03      	cmp	r3, #3
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000ae4:	bf04      	itt	eq
 8000ae6:	4b11      	ldreq	r3, [pc, #68]	@ (8000b2c <RCC_GetClocksFreq+0x258>)
 8000ae8:	6283      	streq	r3, [r0, #40]	@ 0x28
 8000aea:	e756      	b.n	800099a <RCC_GetClocksFreq+0xc6>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000aec:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8000aee:	e75a      	b.n	80009a6 <RCC_GetClocksFreq+0xd2>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000af0:	6382      	str	r2, [r0, #56]	@ 0x38
}
 8000af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000af4:	6302      	str	r2, [r0, #48]	@ 0x30
 8000af6:	e75c      	b.n	80009b2 <RCC_GetClocksFreq+0xde>
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000af8:	6342      	str	r2, [r0, #52]	@ 0x34
 8000afa:	e760      	b.n	80009be <RCC_GetClocksFreq+0xea>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000afc:	6282      	str	r2, [r0, #40]	@ 0x28
 8000afe:	e74c      	b.n	800099a <RCC_GetClocksFreq+0xc6>
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000b00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b04:	6283      	str	r3, [r0, #40]	@ 0x28
 8000b06:	e748      	b.n	800099a <RCC_GetClocksFreq+0xc6>
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000b08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b0c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8000b0e:	e74a      	b.n	80009a6 <RCC_GetClocksFreq+0xd2>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000b10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b14:	6383      	str	r3, [r0, #56]	@ 0x38
}
 8000b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000b18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b1c:	6303      	str	r3, [r0, #48]	@ 0x30
 8000b1e:	e748      	b.n	80009b2 <RCC_GetClocksFreq+0xde>
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000b20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b24:	6343      	str	r3, [r0, #52]	@ 0x34
 8000b26:	e74a      	b.n	80009be <RCC_GetClocksFreq+0xea>
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	007a1200 	.word	0x007a1200
 8000b30:	08001118 	.word	0x08001118
 8000b34:	003d0900 	.word	0x003d0900

08000b38 <RCC_ADCCLKConfig>:
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8000b38:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <RCC_ADCCLKConfig+0x1c>)
  if (tmp != 0)
 8000b3a:	0f03      	lsrs	r3, r0, #28
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8000b3c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000b3e:	bf14      	ite	ne
 8000b40:	f423 5378 	bicne.w	r3, r3, #15872	@ 0x3e00
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8000b44:	f423 73f8 	biceq.w	r3, r3, #496	@ 0x1f0
 8000b48:	62d3      	str	r3, [r2, #44]	@ 0x2c
  RCC->CFGR2 |= RCC_PLLCLK;
 8000b4a:	4a02      	ldr	r2, [pc, #8]	@ (8000b54 <RCC_ADCCLKConfig+0x1c>)
 8000b4c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000b4e:	4303      	orrs	r3, r0
 8000b50:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000

08000b58 <RCC_I2CCLKConfig>:
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 8000b58:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <RCC_I2CCLKConfig+0x1c>)
  if (tmp != 0)
 8000b5a:	0f03      	lsrs	r3, r0, #28
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 8000b5c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000b5e:	bf14      	ite	ne
 8000b60:	f023 0320 	bicne.w	r3, r3, #32
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000b64:	f023 0310 	biceq.w	r3, r3, #16
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
  RCC->CFGR3 |= RCC_I2CCLK;
 8000b6a:	4a02      	ldr	r2, [pc, #8]	@ (8000b74 <RCC_I2CCLKConfig+0x1c>)
 8000b6c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000b6e:	4303      	orrs	r3, r0
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b72:	4770      	bx	lr
 8000b74:	40021000 	.word	0x40021000

08000b78 <RCC_TIMCLKConfig>:
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 8000b78:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <RCC_TIMCLKConfig+0x1c>)
  if (tmp != 0)
 8000b7a:	0f03      	lsrs	r3, r0, #28
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 8000b7c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000b7e:	bf14      	ite	ne
 8000b80:	f423 7300 	bicne.w	r3, r3, #512	@ 0x200
    RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 8000b84:	f423 7380 	biceq.w	r3, r3, #256	@ 0x100
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
  RCC->CFGR3 |= RCC_TIMCLK;
 8000b8a:	4a02      	ldr	r2, [pc, #8]	@ (8000b94 <RCC_TIMCLKConfig+0x1c>)
 8000b8c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000b8e:	4303      	orrs	r3, r0
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000

08000b98 <RCC_USARTCLKConfig>:
  tmp = (RCC_USARTCLK >> 28);
 8000b98:	0f03      	lsrs	r3, r0, #28
  switch (tmp)
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d809      	bhi.n	8000bb4 <RCC_USARTCLKConfig+0x1c>
 8000ba0:	e8df f003 	tbb	[pc, r3]
 8000ba4:	1f191303 	.word	0x1f191303
 8000ba8:	0d          	.byte	0x0d
 8000ba9:	00          	.byte	0x00
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8000baa:	4a11      	ldr	r2, [pc, #68]	@ (8000bf0 <RCC_USARTCLKConfig+0x58>)
 8000bac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000bae:	f023 0303 	bic.w	r3, r3, #3
 8000bb2:	6313      	str	r3, [r2, #48]	@ 0x30
  RCC->CFGR3 |= RCC_USARTCLK;
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <RCC_USARTCLKConfig+0x58>)
 8000bb6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000bb8:	4303      	orrs	r3, r0
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bbc:	4770      	bx	lr
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <RCC_USARTCLKConfig+0x58>)
 8000bc0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000bc2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
      break;
 8000bc8:	e7f4      	b.n	8000bb4 <RCC_USARTCLKConfig+0x1c>
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8000bca:	4a09      	ldr	r2, [pc, #36]	@ (8000bf0 <RCC_USARTCLKConfig+0x58>)
 8000bcc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000bce:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
      break;
 8000bd4:	e7ee      	b.n	8000bb4 <RCC_USARTCLKConfig+0x1c>
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 8000bd6:	4a06      	ldr	r2, [pc, #24]	@ (8000bf0 <RCC_USARTCLKConfig+0x58>)
 8000bd8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000bda:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000bde:	6313      	str	r3, [r2, #48]	@ 0x30
      break;
 8000be0:	e7e8      	b.n	8000bb4 <RCC_USARTCLKConfig+0x1c>
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 8000be2:	4a03      	ldr	r2, [pc, #12]	@ (8000bf0 <RCC_USARTCLKConfig+0x58>)
 8000be4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000be6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000bea:	6313      	str	r3, [r2, #48]	@ 0x30
      break;
 8000bec:	e7e2      	b.n	8000bb4 <RCC_USARTCLKConfig+0x1c>
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <RCC_USBCLKConfig>:
  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000bf4:	4b01      	ldr	r3, [pc, #4]	@ (8000bfc <RCC_USBCLKConfig+0x8>)
 8000bf6:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
}
 8000bfa:	4770      	bx	lr
 8000bfc:	42420000 	.word	0x42420000

08000c00 <RCC_RTCCLKConfig>:
  RCC->BDCR |= RCC_RTCCLKSource;
 8000c00:	4a02      	ldr	r2, [pc, #8]	@ (8000c0c <RCC_RTCCLKConfig+0xc>)
 8000c02:	6a13      	ldr	r3, [r2, #32]
 8000c04:	4303      	orrs	r3, r0
 8000c06:	6213      	str	r3, [r2, #32]
}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000

08000c10 <RCC_I2SCLKConfig>:
  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000c10:	4b01      	ldr	r3, [pc, #4]	@ (8000c18 <RCC_I2SCLKConfig+0x8>)
 8000c12:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
}
 8000c16:	4770      	bx	lr
 8000c18:	42420000 	.word	0x42420000

08000c1c <RCC_RTCCLKCmd>:
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000c1c:	4b01      	ldr	r3, [pc, #4]	@ (8000c24 <RCC_RTCCLKCmd+0x8>)
 8000c1e:	f8c3 043c 	str.w	r0, [r3, #1084]	@ 0x43c
}
 8000c22:	4770      	bx	lr
 8000c24:	42420000 	.word	0x42420000

08000c28 <RCC_BackupResetCmd>:
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000c28:	4b01      	ldr	r3, [pc, #4]	@ (8000c30 <RCC_BackupResetCmd+0x8>)
 8000c2a:	f8c3 0440 	str.w	r0, [r3, #1088]	@ 0x440
}
 8000c2e:	4770      	bx	lr
 8000c30:	42420000 	.word	0x42420000

08000c34 <RCC_AHBPeriphClockCmd>:
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <RCC_AHBPeriphClockCmd+0x14>)
 8000c36:	6953      	ldr	r3, [r2, #20]
  if (NewState != DISABLE)
 8000c38:	b111      	cbz	r1, 8000c40 <RCC_AHBPeriphClockCmd+0xc>
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c3a:	4303      	orrs	r3, r0
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c40:	ea23 0300 	bic.w	r3, r3, r0
 8000c44:	6153      	str	r3, [r2, #20]
}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000

08000c4c <RCC_APB2PeriphClockCmd>:
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c4c:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <RCC_APB2PeriphClockCmd+0x14>)
 8000c4e:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 8000c50:	b111      	cbz	r1, 8000c58 <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c52:	4303      	orrs	r3, r0
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c58:	ea23 0300 	bic.w	r3, r3, r0
 8000c5c:	6193      	str	r3, [r2, #24]
}
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000

08000c64 <RCC_APB1PeriphClockCmd>:
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <RCC_APB1PeriphClockCmd+0x14>)
 8000c66:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8000c68:	b111      	cbz	r1, 8000c70 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c6a:	4303      	orrs	r3, r0
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c70:	ea23 0300 	bic.w	r3, r3, r0
 8000c74:	61d3      	str	r3, [r2, #28]
}
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000

08000c7c <RCC_AHBPeriphResetCmd>:
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000c7c:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <RCC_AHBPeriphResetCmd+0x14>)
 8000c7e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  if (NewState != DISABLE)
 8000c80:	b111      	cbz	r1, 8000c88 <RCC_AHBPeriphResetCmd+0xc>
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000c82:	4303      	orrs	r3, r0
 8000c84:	6293      	str	r3, [r2, #40]	@ 0x28
 8000c86:	4770      	bx	lr
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000c88:	ea23 0300 	bic.w	r3, r3, r0
 8000c8c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000

08000c94 <RCC_APB2PeriphResetCmd>:
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <RCC_APB2PeriphResetCmd+0x14>)
 8000c96:	68d3      	ldr	r3, [r2, #12]
  if (NewState != DISABLE)
 8000c98:	b111      	cbz	r1, 8000ca0 <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	60d3      	str	r3, [r2, #12]
 8000c9e:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000ca0:	ea23 0300 	bic.w	r3, r3, r0
 8000ca4:	60d3      	str	r3, [r2, #12]
}
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000

08000cac <RCC_APB1PeriphResetCmd>:
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000cac:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <RCC_APB1PeriphResetCmd+0x14>)
 8000cae:	6913      	ldr	r3, [r2, #16]
  if (NewState != DISABLE)
 8000cb0:	b111      	cbz	r1, 8000cb8 <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000cb2:	4303      	orrs	r3, r0
 8000cb4:	6113      	str	r3, [r2, #16]
 8000cb6:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000cb8:	ea23 0300 	bic.w	r3, r3, r0
 8000cbc:	6113      	str	r3, [r2, #16]
}
 8000cbe:	4770      	bx	lr
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <RCC_ITConfig>:
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000cc4:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <RCC_ITConfig+0x14>)
 8000cc6:	7a53      	ldrb	r3, [r2, #9]
  if (NewState != DISABLE)
 8000cc8:	b111      	cbz	r1, 8000cd0 <RCC_ITConfig+0xc>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000cca:	4303      	orrs	r3, r0
 8000ccc:	7253      	strb	r3, [r2, #9]
 8000cce:	4770      	bx	lr
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000cd0:	ea23 0300 	bic.w	r3, r3, r0
 8000cd4:	7253      	strb	r3, [r2, #9]
}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000

08000cdc <RCC_GetFlagStatus>:
   if (tmp == 0)               /* The flag to check is in CR register */
 8000cdc:	0943      	lsrs	r3, r0, #5
 8000cde:	d108      	bne.n	8000cf2 <RCC_GetFlagStatus+0x16>
    statusreg = RCC->CR;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <RCC_GetFlagStatus+0x44>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
  tmp = RCC_FLAG & FLAG_MASK;
 8000ce4:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000ce8:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000cec:	f000 0001 	and.w	r0, r0, #1
 8000cf0:	4770      	bx	lr
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d00b      	beq.n	8000d0e <RCC_GetFlagStatus+0x32>
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 8000cf6:	2b04      	cmp	r3, #4
    statusreg = RCC->CFGR;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <RCC_GetFlagStatus+0x44>)
 8000cfa:	bf0c      	ite	eq
 8000cfc:	685b      	ldreq	r3, [r3, #4]
    statusreg = RCC->CSR;
 8000cfe:	6a5b      	ldrne	r3, [r3, #36]	@ 0x24
  tmp = RCC_FLAG & FLAG_MASK;
 8000d00:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000d04:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000d08:	f000 0001 	and.w	r0, r0, #1
 8000d0c:	4770      	bx	lr
    statusreg = RCC->BDCR;
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <RCC_GetFlagStatus+0x44>)
 8000d10:	6a1b      	ldr	r3, [r3, #32]
  tmp = RCC_FLAG & FLAG_MASK;
 8000d12:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000d16:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000d1a:	f000 0001 	and.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000

08000d24 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000d24:	4a02      	ldr	r2, [pc, #8]	@ (8000d30 <RCC_ClearFlag+0xc>)
 8000d26:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000d28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d2c:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000d2e:	4770      	bx	lr
 8000d30:	40021000 	.word	0x40021000

08000d34 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <RCC_GetITStatus+0x10>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000d3a:	bf14      	ite	ne
 8000d3c:	2001      	movne	r0, #1
 8000d3e:	2000      	moveq	r0, #0
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000d48:	4b01      	ldr	r3, [pc, #4]	@ (8000d50 <RCC_ClearITPendingBit+0x8>)
 8000d4a:	7298      	strb	r0, [r3, #10]
}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <SYSCFG_DeInit>:
  *         MEM_MODE bits took the value from the user option bytes.
  */
void SYSCFG_DeInit(void)
{
  /* Reset SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
  SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <SYSCFG_DeInit+0x24>)
 8000d56:	6819      	ldr	r1, [r3, #0]
 8000d58:	f001 0103 	and.w	r1, r1, #3
 8000d5c:	6019      	str	r1, [r3, #0]
  /* Set FPU Interrupt Enable bits to default value */
  SYSCFG->CFGR1 |= 0x7C000000;
 8000d5e:	6819      	ldr	r1, [r3, #0]
  /* Reset RAM Write protection bits to default value */
  SYSCFG->RCR = 0x00000000;
 8000d60:	2200      	movs	r2, #0
  SYSCFG->CFGR1 |= 0x7C000000;
 8000d62:	f041 41f8 	orr.w	r1, r1, #2080374784	@ 0x7c000000
 8000d66:	6019      	str	r1, [r3, #0]
  SYSCFG->RCR = 0x00000000;
 8000d68:	605a      	str	r2, [r3, #4]
  /* Set EXTICRx registers to reset value */
  SYSCFG->EXTICR[0] = 0;
 8000d6a:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[1] = 0;
 8000d6c:	60da      	str	r2, [r3, #12]
  SYSCFG->EXTICR[2] = 0;
 8000d6e:	611a      	str	r2, [r3, #16]
  SYSCFG->EXTICR[3] = 0;
 8000d70:	615a      	str	r2, [r3, #20]
  /* Set CFGR2 register to reset value */
  SYSCFG->CFGR2 = 0;
 8000d72:	619a      	str	r2, [r3, #24]
}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40010000 	.word	0x40010000

08000d7c <SYSCFG_MemoryRemapConfig>:

  /* Check the parameter */
  assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));

  /* Get CFGR1 register value */
  tmpcfgr1 = SYSCFG->CFGR1;
 8000d7c:	4a03      	ldr	r2, [pc, #12]	@ (8000d8c <SYSCFG_MemoryRemapConfig+0x10>)
 8000d7e:	6813      	ldr	r3, [r2, #0]

  /* Clear MEM_MODE bits */
  tmpcfgr1 &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 8000d80:	f023 0303 	bic.w	r3, r3, #3

  /* Set the new MEM_MODE bits value */
  tmpcfgr1 |= (uint32_t) SYSCFG_MemoryRemap;
 8000d84:	4303      	orrs	r3, r0

  /* Set CFGR1 register with the new memory remap configuration */
  SYSCFG->CFGR1 = tmpcfgr1;
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40010000 	.word	0x40010000

08000d90 <SYSCFG_DMAChannelRemapConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Remap the DMA channel */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <SYSCFG_DMAChannelRemapConfig+0x14>)
 8000d92:	6813      	ldr	r3, [r2, #0]
  if (NewState != DISABLE)
 8000d94:	b111      	cbz	r1, 8000d9c <SYSCFG_DMAChannelRemapConfig+0xc>
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
 8000d96:	4303      	orrs	r3, r0
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4770      	bx	lr
  }
  else
  {
    /* use the default DMA channel mapping */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_DMARemap);
 8000d9c:	ea23 0300 	bic.w	r3, r3, r0
 8000da0:	6013      	str	r3, [r2, #0]
  }
}
 8000da2:	4770      	bx	lr
 8000da4:	40010000 	.word	0x40010000

08000da8 <SYSCFG_TriggerRemapConfig>:
  *         This parameter can be: ENABLE or DISABLE.
  * @note   ENABLE:  Enable fast mode plus driving capability for selected pin
  * @note   DISABLE: Disable fast mode plus driving capability for selected pin
  * @retval None
  */
void SYSCFG_TriggerRemapConfig(uint32_t SYSCFG_TriggerRemap, FunctionalState NewState)
 8000da8:	b121      	cbz	r1, 8000db4 <SYSCFG_TriggerRemapConfig+0xc>
 8000daa:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <SYSCFG_TriggerRemapConfig+0x18>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4310      	orrs	r0, r2
 8000db0:	6018      	str	r0, [r3, #0]
 8000db2:	4770      	bx	lr
 8000db4:	4a02      	ldr	r2, [pc, #8]	@ (8000dc0 <SYSCFG_TriggerRemapConfig+0x18>)
 8000db6:	6813      	ldr	r3, [r2, #0]
 8000db8:	ea23 0300 	bic.w	r3, r3, r0
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4770      	bx	lr
 8000dc0:	40010000 	.word	0x40010000

08000dc4 <SYSCFG_EncoderRemapConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ENCODER_REMAP(SYSCFG_EncoderRemap));

  /* Reset the encoder mode remapping bits */
  SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_CFGR1_ENCODER_MODE);
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <SYSCFG_EncoderRemapConfig+0x14>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8000dcc:	601a      	str	r2, [r3, #0]

  /* Set the selected configuration */
  SYSCFG->CFGR1 |= (uint32_t)(SYSCFG_EncoderRemap);
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4302      	orrs	r2, r0
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40010000 	.word	0x40010000

08000ddc <SYSCFG_USBInterruptLineRemapCmd>:
{
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Remap the USB interupt lines */
  *(__IO uint32_t *) CFGR1_USBITRMP_BB = (uint32_t)NewState;
 8000ddc:	4b01      	ldr	r3, [pc, #4]	@ (8000de4 <SYSCFG_USBInterruptLineRemapCmd+0x8>)
 8000dde:	6158      	str	r0, [r3, #20]
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	42200000 	.word	0x42200000

08000de8 <SYSCFG_I2CFastModePlusConfig>:
  *        can be enabled only by using SYSCFG_I2CFastModePlus_I2C1 parameter.
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using SYSCFG_I2CFastModePlus_I2C2 parameter.
  * @retval None
  */
void SYSCFG_I2CFastModePlusConfig(uint32_t SYSCFG_I2CFastModePlus, FunctionalState NewState)
 8000de8:	b121      	cbz	r1, 8000df4 <SYSCFG_I2CFastModePlusConfig+0xc>
 8000dea:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <SYSCFG_I2CFastModePlusConfig+0x18>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4310      	orrs	r0, r2
 8000df0:	6018      	str	r0, [r3, #0]
 8000df2:	4770      	bx	lr
 8000df4:	4a02      	ldr	r2, [pc, #8]	@ (8000e00 <SYSCFG_I2CFastModePlusConfig+0x18>)
 8000df6:	6813      	ldr	r3, [r2, #0]
 8000df8:	ea23 0300 	bic.w	r3, r3, r0
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4770      	bx	lr
 8000e00:	40010000 	.word	0x40010000

08000e04 <SYSCFG_ITConfig>:
  *     @arg SYSCFG_IT_IOC: Invalid operation Interrupt
  * @param  NewState: new state of the specified SDADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SYSCFG_ITConfig(uint32_t SYSCFG_IT, FunctionalState NewState)  
 8000e04:	b121      	cbz	r1, 8000e10 <SYSCFG_ITConfig+0xc>
 8000e06:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <SYSCFG_ITConfig+0x18>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4310      	orrs	r0, r2
 8000e0c:	6018      	str	r0, [r3, #0]
 8000e0e:	4770      	bx	lr
 8000e10:	4a02      	ldr	r2, [pc, #8]	@ (8000e1c <SYSCFG_ITConfig+0x18>)
 8000e12:	6813      	ldr	r3, [r2, #0]
 8000e14:	ea23 0300 	bic.w	r3, r3, r0
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4770      	bx	lr
 8000e1c:	40010000 	.word	0x40010000

08000e20 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000e20:	f001 03fc 	and.w	r3, r1, #252	@ 0xfc
 8000e24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000e28:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000e2c:	f001 0103 	and.w	r1, r1, #3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000e30:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000e32:	0089      	lsls	r1, r1, #2
 8000e34:	f04f 0c0f 	mov.w	ip, #15
 8000e38:	fa0c fc01 	lsl.w	ip, ip, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000e3c:	ea22 020c 	bic.w	r2, r2, ip
 8000e40:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	4088      	lsls	r0, r1
 8000e46:	4310      	orrs	r0, r2
 8000e48:	6098      	str	r0, [r3, #8]
}
 8000e4a:	4770      	bx	lr

08000e4c <SYSCFG_BreakConfig>:
void SYSCFG_BreakConfig(uint32_t SYSCFG_Break)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_LOCK_CONFIG(SYSCFG_Break));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Break;
 8000e4c:	4a02      	ldr	r2, [pc, #8]	@ (8000e58 <SYSCFG_BreakConfig+0xc>)
 8000e4e:	6993      	ldr	r3, [r2, #24]
 8000e50:	4303      	orrs	r3, r0
 8000e52:	6193      	str	r3, [r2, #24]
}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40010000 	.word	0x40010000

08000e5c <SYSCFG_BypassParityCheckDisable>:
  * @retval None
  */
void SYSCFG_BypassParityCheckDisable(void)
{
  /* Disable the adddress parity check on RAM */
  *(__IO uint32_t *) CFGR1_BYPADDRPAR_BB = (uint32_t)0x00000001;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <SYSCFG_BypassParityCheckDisable+0xc>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	42200000 	.word	0x42200000

08000e6c <SYSCFG_SRAMWRPEnable>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_PAGE(SYSCFG_SRAMWRP));

  /* Enable the write-protection on the selected ICODE SRAM page */
  SYSCFG->RCR |= (uint32_t)SYSCFG_SRAMWRP;
 8000e6c:	4a02      	ldr	r2, [pc, #8]	@ (8000e78 <SYSCFG_SRAMWRPEnable+0xc>)
 8000e6e:	6853      	ldr	r3, [r2, #4]
 8000e70:	4303      	orrs	r3, r0
 8000e72:	6053      	str	r3, [r2, #4]
}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40010000 	.word	0x40010000

08000e7c <SYSCFG_GetFlagStatus>:

  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  /* Check the status of the specified SPI flag */
  if ((SYSCFG->CFGR2 & SYSCFG_CFGR2_SRAM_PE) != (uint32_t)RESET)
 8000e7c:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <SYSCFG_GetFlagStatus+0xc>)
 8000e7e:	6998      	ldr	r0, [r3, #24]
    /* SYSCFG_Flag is reset */
    bitstatus = RESET;
  }
  /* Return the SYSCFG_Flag status */
  return  bitstatus;
}
 8000e80:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40010000 	.word	0x40010000

08000e8c <SYSCFG_ClearFlag>:
  * @param  SYSCFG_Flag: selects the flag to be cleared.
  *   This parameter can be any combination of the following values:
  *     @arg SYSCFG_FLAG_PE: SRAM parity error flag.
  * @retval None
  */
void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag)
 8000e8c:	4b02      	ldr	r3, [pc, #8]	@ (8000e98 <SYSCFG_ClearFlag+0xc>)
 8000e8e:	699a      	ldr	r2, [r3, #24]
 8000e90:	4310      	orrs	r0, r2
 8000e92:	6198      	str	r0, [r3, #24]
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40010000 	.word	0x40010000

08000e9c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e9e:	e003      	b.n	8000ea8 <LoopCopyDataInit>

08000ea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 8000ea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ea6:	3104      	adds	r1, #4

08000ea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea8:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8000eac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eb0:	d3f6      	bcc.n	8000ea0 <CopyDataInit>
  ldr  r2, =_sbss
 8000eb2:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 8000eb4:	e002      	b.n	8000ebc <LoopFillZerobss>

08000eb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb8:	f842 3b04 	str.w	r3, [r2], #4

08000ebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ebc:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <LoopFillZerobss+0x20>)
  cmp  r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ec0:	d3f9      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ec2:	f000 f80f 	bl	8000ee4 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8000ec6:	f000 f89f 	bl	8001008 <main>
  bx  lr    
 8000eca:	4770      	bx	lr
  ldr  r3, =_sidata
 8000ecc:	0800115c 	.word	0x0800115c
  ldr  r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ed4:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8000ed8:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8000edc:	2000002c 	.word	0x2000002c

08000ee0 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>
	...

08000ee4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4a38      	ldr	r2, [pc, #224]	@ (8000fc8 <SystemInit+0xe4>)
 8000ee6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000eea:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ef2:	4b36      	ldr	r3, [pc, #216]	@ (8000fcc <SystemInit+0xe8>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	f042 0201 	orr.w	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000efc:	6859      	ldr	r1, [r3, #4]
 8000efe:	4a34      	ldr	r2, [pc, #208]	@ (8000fd0 <SystemInit+0xec>)
 8000f00:	400a      	ands	r2, r1
 8000f02:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8000f0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000f0e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000f16:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	f422 02fe 	bic.w	r2, r2, #8323072	@ 0x7f0000
 8000f1e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f22:	f022 020f 	bic.w	r2, r2, #15
 8000f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000f28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd4 <SystemInit+0xf0>)
{
 8000f2c:	b082      	sub	sp, #8
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000f2e:	400a      	ands	r2, r1
 8000f30:	631a      	str	r2, [r3, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000f36:	9200      	str	r2, [sp, #0]
 8000f38:	9201      	str	r2, [sp, #4]
 #if defined (PLL_SOURCE_HSE)
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 #elif defined (PLL_SOURCE_HSE_BYPASS)
  /* HSE oscillator bypassed with external clock */    
  RCC->CR |= (uint32_t)(RCC_CR_HSEON | RCC_CR_HSEBYP);
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	f442 22a0 	orr.w	r2, r2, #327680	@ 0x50000
 8000f40:	601a      	str	r2, [r3, #0]
 #endif /* PLL_SOURCE_HSE */
   
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000f48:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8000f4a:	9a00      	ldr	r2, [sp, #0]
 8000f4c:	3201      	adds	r2, #1
 8000f4e:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000f50:	9a01      	ldr	r2, [sp, #4]
 8000f52:	b91a      	cbnz	r2, 8000f5c <SystemInit+0x78>
 8000f54:	9a00      	ldr	r2, [sp, #0]
 8000f56:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8000f5a:	d1f2      	bne.n	8000f42 <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000f62:	bf18      	it	ne
 8000f64:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f66:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000f68:	9a01      	ldr	r2, [sp, #4]
 8000f6a:	2a01      	cmp	r2, #1
 8000f6c:	d126      	bne.n	8000fbc <SystemInit+0xd8>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd8 <SystemInit+0xf4>)
 8000f70:	2112      	movs	r1, #18
 8000f72:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f82:	605a      	str	r2, [r3, #4]
    
   
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8000f8a:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	f442 12e8 	orr.w	r2, r2, #1900544	@ 0x1d0000
 8000f92:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000f9a:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	0192      	lsls	r2, r2, #6
 8000fa0:	d5fc      	bpl.n	8000f9c <SystemInit+0xb8>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	f022 0203 	bic.w	r2, r2, #3
 8000fa8:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	f042 0202 	orr.w	r2, r2, #2
 8000fb0:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	f002 020c 	and.w	r2, r2, #12
 8000fb8:	2a08      	cmp	r2, #8
 8000fba:	d1fa      	bne.n	8000fb2 <SystemInit+0xce>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000fbc:	4b02      	ldr	r3, [pc, #8]	@ (8000fc8 <SystemInit+0xe4>)
 8000fbe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	b002      	add	sp, #8
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	f87fc00c 	.word	0xf87fc00c
 8000fd4:	ff00fccc 	.word	0xff00fccc
 8000fd8:	40022000 	.word	0x40022000

08000fdc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000fdc:	4770      	bx	lr

08000fde <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler>

08000fe0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler>

08000fe2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler>

08000fe4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler>

08000fe6 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8000fe6:	4770      	bx	lr

08000fe8 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  TimingDelay_Decrement();
 8000fec:	f000 b866 	b.w	80010bc <TimingDelay_Decrement>

08000ff0 <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in milliseconds.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{ 
 8000ff0:	b082      	sub	sp, #8
  TimingDelay = nTime;
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <Delay+0x14>)
{ 
 8000ff4:	9001      	str	r0, [sp, #4]
  TimingDelay = nTime;
 8000ff6:	9a01      	ldr	r2, [sp, #4]
 8000ff8:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0);
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2a00      	cmp	r2, #0
 8000ffe:	d1fc      	bne.n	8000ffa <Delay+0xa>
}
 8001000:	b002      	add	sp, #8
 8001002:	4770      	bx	lr
 8001004:	20000028 	.word	0x20000028

08001008 <main>:
{
 8001008:	b508      	push	{r3, lr}
  STM_EVAL_LEDInit(LED3);
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff f8bc 	bl	8000188 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff f8b9 	bl	8000188 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 8001016:	2002      	movs	r0, #2
 8001018:	f7ff f8b6 	bl	8000188 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 800101c:	2003      	movs	r0, #3
 800101e:	f7ff f8b3 	bl	8000188 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED7);
 8001022:	2004      	movs	r0, #4
 8001024:	f7ff f8b0 	bl	8000188 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED8);
 8001028:	2005      	movs	r0, #5
 800102a:	f7ff f8ad 	bl	8000188 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED9);
 800102e:	2006      	movs	r0, #6
 8001030:	f7ff f8aa 	bl	8000188 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED10);
 8001034:	2007      	movs	r0, #7
 8001036:	f7ff f8a7 	bl	8000188 <STM_EVAL_LEDInit>
  STM_EVAL_LEDOn(LED3);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff f8c2 	bl	80001c4 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED7);
 8001040:	2004      	movs	r0, #4
 8001042:	f7ff f8bf 	bl	80001c4 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED6);
 8001046:	2003      	movs	r0, #3
 8001048:	f7ff f8bc 	bl	80001c4 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED10);
 800104c:	2007      	movs	r0, #7
 800104e:	f7ff f8b9 	bl	80001c4 <STM_EVAL_LEDOn>
  if (SysTick_Config(SystemCoreClock / 1000))
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <main+0xac>)
 8001054:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	fbb3 f3f2 	udiv	r3, r3, r2
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800105e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001062:	3b01      	subs	r3, #1
 8001064:	6153      	str	r3, [r2, #20]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <main+0xb0>)
 8001068:	21f0      	movs	r1, #240	@ 0xf0
 800106a:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800106e:	2300      	movs	r3, #0
 8001070:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	2307      	movs	r3, #7
 8001074:	6113      	str	r3, [r2, #16]
    STM_EVAL_LEDToggle(LED3);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff f8c0 	bl	80001fc <STM_EVAL_LEDToggle>
    STM_EVAL_LEDToggle(LED7);
 800107c:	2004      	movs	r0, #4
 800107e:	f7ff f8bd 	bl	80001fc <STM_EVAL_LEDToggle>
    STM_EVAL_LEDToggle(LED6);
 8001082:	2003      	movs	r0, #3
 8001084:	f7ff f8ba 	bl	80001fc <STM_EVAL_LEDToggle>
    STM_EVAL_LEDToggle(LED10);
 8001088:	2007      	movs	r0, #7
 800108a:	f7ff f8b7 	bl	80001fc <STM_EVAL_LEDToggle>
    Delay(100);
 800108e:	2064      	movs	r0, #100	@ 0x64
 8001090:	f7ff ffae 	bl	8000ff0 <Delay>
    STM_EVAL_LEDToggle(LED4);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff f8b1 	bl	80001fc <STM_EVAL_LEDToggle>
    STM_EVAL_LEDToggle(LED5);
 800109a:	2002      	movs	r0, #2
 800109c:	f7ff f8ae 	bl	80001fc <STM_EVAL_LEDToggle>
    STM_EVAL_LEDToggle(LED9);
 80010a0:	2006      	movs	r0, #6
 80010a2:	f7ff f8ab 	bl	80001fc <STM_EVAL_LEDToggle>
    STM_EVAL_LEDToggle(LED8);
 80010a6:	2005      	movs	r0, #5
 80010a8:	f7ff f8a8 	bl	80001fc <STM_EVAL_LEDToggle>
    Delay(150);
 80010ac:	2096      	movs	r0, #150	@ 0x96
 80010ae:	f7ff ff9f 	bl	8000ff0 <Delay>
  while (1)
 80010b2:	e7e0      	b.n	8001076 <main+0x6e>
 80010b4:	20000024 	.word	0x20000024
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <TimingDelay_Decrement>:
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 80010bc:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <TimingDelay_Decrement+0x10>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	b112      	cbz	r2, 80010c8 <TimingDelay_Decrement+0xc>
  { 
    TimingDelay--;
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	3a01      	subs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
  }
}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000028 	.word	0x20000028

080010d0 <GPIO_CLK>:
 80010d0:	00200000 00200000 00200000 00200000     .. ... ... ... .
 80010e0:	00200000 00200000 00200000 00200000     .. ... ... ... .

080010f0 <GPIO_PIN>:
 80010f0:	01000200 80000400 40000800 20001000     ...........@... 

08001100 <BUTTON_IRQn>:
 8001100:	00000006                                ....

08001104 <BUTTON_PIN_SOURCE>:
 8001104:	00000000                                ....

08001108 <BUTTON_PORT_SOURCE>:
 8001108:	00000000                                ....

0800110c <BUTTON_EXTI_LINE>:
 800110c:	00000000                                ....

08001110 <BUTTON_CLK>:
 8001110:	00020000                                ....

08001114 <BUTTON_PIN>:
 8001114:	00000001                                ....

08001118 <APBAHBPrescTable>:
 8001118:	00000000 04030201 04030201 09080706     ................

08001128 <ADCPrescTable>:
 8001128:	00010000 00040002 00080006 000c000a     ................
 8001138:	00200010 00800040 00000100              .. .@.......

08001144 <_init>:
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	bf00      	nop
 8001148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114a:	bc08      	pop	{r3}
 800114c:	469e      	mov	lr, r3
 800114e:	4770      	bx	lr

08001150 <_fini>:
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001152:	bf00      	nop
 8001154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001156:	bc08      	pop	{r3}
 8001158:	469e      	mov	lr, r3
 800115a:	4770      	bx	lr
